{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","value","change","submit","className","onSubmit","type","onChange","placeholder","Result","props","weather","error","city","temp","sunrise","sunset","wind","pressure","date","timezone","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","toUpperCase","APIKey","App","state","handleChangeInputValue","e","setState","target","handleCitySubmit","preventDefault","currentAPI","fetch","then","response","ok","Error","json","data","toLocaleString","prevState","sys","main","speed","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.00b5dcb4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Form.css\";\r\n\r\nconst Form = ({ value, change, submit }) => {\r\n  return (\r\n    <>\r\n      <div className=\"form\">\r\n        <h1 className=\"title\">Weather App</h1>\r\n        <form onSubmit={submit}>\r\n          <input\r\n            type=\"text\"\r\n            value={value}\r\n            onChange={change}\r\n            placeholder=\"Type city name...\"\r\n          />\r\n          <button>Check</button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./Result.css\";\r\n\r\nconst Result = (props) => {\r\n  const {\r\n    error,\r\n    city,\r\n    temp,\r\n    sunrise,\r\n    sunset,\r\n    wind,\r\n    pressure,\r\n    date,\r\n    timezone,\r\n  } = props.weather;\r\n\r\n  let content = null;\r\n\r\n  const sunriseTime = new Date(\r\n    (sunrise + timezone - 7200) * 1000\r\n  ).toLocaleTimeString();\r\n\r\n  const sunsetTime = new Date(\r\n    (sunset + timezone - 7200) * 1000\r\n  ).toLocaleTimeString();\r\n\r\n  if (!error && city) {\r\n    content = (\r\n      <div>\r\n        <h1>Current weather in {city.toUpperCase()}</h1>\r\n        <h2>Date: {date}</h2>\r\n        <h3>Temperature: {temp} [Â°C]</h3>\r\n        <h4>Sunrise: {sunriseTime} </h4>\r\n        <h4>Sunset: {sunsetTime} </h4>\r\n        <h4>Pressure: {pressure} [hPa] </h4>\r\n        <h4>Wind: {wind} [m/s] </h4>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"result\">\r\n      {error ? `There is no data for ${city}` : content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React, { Component } from \"react\";\r\nimport Form from \"./Form\";\r\nimport Result from \"./Result\";\r\nimport \"./App.css\";\r\nconst APIKey = \"aeec1f6b19d0406ab75f5182e4799196\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    value: \"\",\r\n    date: \"\",\r\n    city: \"\",\r\n    sunrise: \"\",\r\n    sunset: \"\",\r\n    temp: \"\",\r\n    pressure: \"\",\r\n    wind: \"\",\r\n    error: \"\",\r\n    timezone: \"\",\r\n  };\r\n\r\n  handleChangeInputValue = (e) => {\r\n    this.setState({ value: e.target.value });\r\n  };\r\n\r\n  handleCitySubmit = (e) => {\r\n    e.preventDefault();\r\n    const currentAPI = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`;\r\n    const forecastAPI = `http://pro.openweathermap.org/data/2.5/forecast/hourly?q=${this.state.value}&appid=${APIKey}&units=metric`;\r\n\r\n    fetch(currentAPI)\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          return response;\r\n        }\r\n        throw Error(\"Fetching error\");\r\n      })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const date = new Date().toLocaleString();\r\n        this.setState((prevState) => ({\r\n          error: false,\r\n          date,\r\n          city: prevState.value,\r\n          sunrise: data.sys.sunrise,\r\n          sunset: data.sys.sunset,\r\n          temp: data.main.temp,\r\n          pressure: data.main.pressure,\r\n          wind: data.wind.speed,\r\n          timezone: data.timezone,\r\n        }));\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        this.setState((prevState) => ({\r\n          error: true,\r\n          city: prevState.value,\r\n        }));\r\n      });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Form\r\n          value={this.state.value}\r\n          change={this.handleChangeInputValue}\r\n          submit={this.handleCitySubmit}\r\n        />\r\n        <Result error={this.state.error} weather={this.state} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}